---
# Why disable some?
# blanket disables:
#    mostly very specific warnings, rarely actionable here
# cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays:
#    Avoiding std::array is the whole point of this exercise, even in test code
# cppcoreguidelines-avoid-const-or-ref-data-members
#    Current architecture is built around storing refs to things that live longer,
#    changing those to raw-pointers don't really make it better. 
# cppcoreguidelines-avoid-do-while:
#    I think this has its place and can be more descriptive of the intent than
#    the alternative with just a straight while-loop
# cppcoreguidelines-pro-bounds-pointer-arithmetic:
#    These are allocators and raw containers where pointer arithmetic seems unavoidable
#    in many cases. Should try to use Span where possible, though.
# cppcoreguidelines-avoid-magic-numbers, readability-magic-numbers:
#    Requiring a named constant for a default value seems riddiculous
#    The constant would be named ~identically to the variable
# cppcoreguidelines-macro-usage:
#    Situational, for dependencies only
# cppcoreguidelines-non-private-member-variables-in-classes, misc-non-private-member-variables-in-classes:
#    Having a trivial public setter is dumb.
# cppcoreguidelines-pro-type-cstyle-cast:
#    const_cast is the one that might blow appendages here, but c++ casts make
#    this type of code really hard to read. I'll take over the potential bugs over
#    the cognitive overhead that also causes bugs.
# cppcoreguidelines-pro-type-reinterpret-cast:
#    These are container and allocator implementations, this seems to come with
#    the territory.
# misc-const-correctness:
#    Tests have to exercise both const and non-const paths
#    TODO: Can this be disabled for tests only and still run for template code in library?
# misc-use-anonymous-namespace:
#    Header only
# modernize-use-trailing-return-type:
#    Haven't touched professionally, best not add 'noise'
# modernize-use-auto:
#    Let's not. Better be explicit and consistent unless types are really, really long.
# readability-container-size-empty:
#    Test code has to check size() == 0 as well
# readability-function-cognitive-complexity,readability-function-size:
#    catch2 test cases these as well
# readability-braces-around-statements:
#    clang-format and indentation makes this moot
# readability-identifier-length:
#    Iterators are well established in common practice, some variables match source papers
# readability-uppercase-literal-suffix:
#    Only really needed for 'l' and my font/highlighting is clear even if I use it
Checks: "*,
        -abseil-*,
        -altera-*,
        -android-*,
        -fuchsia-*,
        -google-*,
        -hicpp-*,
        -llvm*,
        -zircon-*,
        -cppcoreguidelines-avoid-c-arrays,
        -cppcoreguidelines-avoid-const-or-ref-data-members,
        -cppcoreguidelines-avoid-do-while,
        -cppcoreguidelines-avoid-magic-numbers,
        -cppcoreguidelines-macro-usage,
        -cppcoreguidelines-narrowing-conversions,
        -cppcoreguidelines-non-private-member-variables-in-classes,
        -cppcoreguidelines-pro-bounds-pointer-arithmetic,
        -cppcoreguidelines-pro-type-cstyle-cast,
        -cppcoreguidelines-pro-type-reinterpret-cast,
        -misc-const-correctness,
        -misc-non-private-member-variables-in-classes,
        -misc-use-anonymous-namespace,
        -modernize-avoid-c-arrays,
        -modernize-use-trailing-return-type,
        -modernize-use-auto,
        -readability-container-size-empty,
        -readability-function-cognitive-complexity,
        -readability-function-size,
        -readability-braces-around-statements,
        -readability-identifier-length,
        -readability-magic-numbers,
        -readability-uppercase-literal-suffix,
"
WarningsAsErrors: ''
HeaderFilterRegex: '.*/prosper/include/.*'
FormatStyle: file
